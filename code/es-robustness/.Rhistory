sequences <- vector(mode="list",length=N_RAND) # save sequences (TO DO - we might not need these)
mat_results_list <- vector(mode="list",length=N_RAND) # save result objects (TO DO - we might not need these)
for(i in c(1:N_RAND)){
sequences[[i]] <- sample(BASAL) # random extinction order
mat_results_list[[i]] <- collapse_wrap_given(N = MATRIX, basal = sequences[[i]])
mat_results_list[[i]]$nodes_susc <- TOT_SUSC
mat_results_list[[i]]$nontarget_lost_each <- stri_count_fixed(mat_results_list[[i]]$name_lost,";")
mat_results_list[[i]]$cum_nontarget_lost <- cumsum(mat_results_list[[i]]$nontarget_lost_each)
mat_results_list[[i]]$Y <- (mat_results_list[[i]]$nodes_susc - mat_results_list[[i]]$cum_nontarget_lost)/mat_results_list[[i]]$nodes_susc
rand$R[i] <- robust_auc(x = mat_results_list[[i]]$prop_removed, y = mat_results_list[[i]]$Y)
}
# For now return min, mean, and max of the robustness results from random extinctions
return(list("min"=min(rand$R),"mean"=mean(rand$R),"max"=max(rand$R)))
}
season <- "Premonsoon" # temp
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
es_edges <- subset(edges, edges$link_type == 1) # ES edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
View(es_edges)
fw <- graph_from_data_frame(fw_edges, directed = TRUE) # network with only food web edges
fw_es <- graph_from_data_frame(edges, directed = TRUE) # network with both food web and es edges
# Remove cannibalism - TO DO - confirm we want to do this.
fw <- simplify(fw, remove.loops = TRUE)
fw_es <- simplify(fw_es, remove.loops=TRUE)
# convert graph objects to adjacency matrices to be used in source functions by AB
mat.fw <- as_adjacency_matrix(fw, sparse= FALSE, attr = NULL)
mat.fw_es <- as_adjacency_matrix(fw_es, sparse = FALSE, attr = NULL)
# number of resources for each species
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(fw, v= species_nodes, mode="in"))
susc.spp <- resources[resources$InDegree>0,] # subset to the non-basal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
fw_name <- sprintf("Tampara_Lake_%s", season)
auc <- fw_robustness(mat.fw, colnames(mat.fw), 1, "high", fw_name, "most_least", tot.susc, FALSE)
auc <- es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", fw_name, "most_least", tot.susc, FALSE, es_nodes)
# Rarity sequence
rarity_sequence <- read.csv(sprintf("%s_rarity_sequence.csv",season), header=T)
rarity_sequence <- rarity_sequence$ORDER
# double check same number of species
if (length(rarity_sequence) != length(species_nodes)){
print("rarity sequence not the correct length")
}
auc <- fw_robustness(mat.fw, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE)
MATRIX <- mat.fw_es
BASAL <- rarity_sequence
N_RAND <- NULL
OUTPUT <- NULL
FW_NAME <- fw_name
SEQ_NAME <- "rarity"
TOT_SUC <- tot.susc
GIVEN <- TRUE
SERVICE_NAMES <- es_nodes
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
N
basal
tmp %>%
tmp %>%
tmp %>%
tmp <- collapse_output_with_names(collapse(N = N, deg = c("g"), basal = basal), basal = basal)
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
output
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
N
N
i
N2
i
i
i
i
i
i
i
i
i
N2
i
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
i
i
i
i
i
N
View(N)
season <- "Premonsoon" # temp
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
es_edges <- subset(edges, edges$link_type == 1) # ES edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
species_nodes
View(fw_edges)
View(es_edges)
es_nodes <- unique(es_edges$to)
fw <- graph_from_data_frame(fw_edges, directed = TRUE) # network with only food web edges
fw_es <- graph_from_data_frame(edges, directed = TRUE) # network with both food web and es edges
View(edges)
fw <- simplify(fw, remove.loops = TRUE)
fw_es <- simplify(fw_es, remove.loops=TRUE)
mat.fw <- as_adjacency_matrix(fw, sparse= FALSE, attr = NULL)
mat.fw_es <- as_adjacency_matrix(fw_es, sparse = FALSE, attr = NULL)
View(mat.fw)
View(mat.fw_es)
hi  <- unique(c(unique(edges$from),unique(edges$to)))
hi
setdiff(species_nodes,hi)
setdiff(es_nodes,hi)
setdiff(hi,species_nodes)
setdiff(hi,es_nodes)
a <- setdiff(hi, es_nodes)
View(fw)
View(es_edges)
season <- "Premonsoon" # temp
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_edges <- subset(edges, edges$link_type == 1) # ES edges only
# remove any es edges that include species not in the species list
es_edges <- subset(es_edges, es_edges$from %in% species_nodes)
# full set of edges to make the es web
es_nodes <- unique(es_edges$to)
season <- "Premonsoon" # temp
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_edges <- subset(edges, edges$link_type == 1) # ES edges only
View(es_edges)
es_edges <- subset(es_edges, es_edges$from %in% species_nodes)
es_nodes <- unique(es_edges$to)
full_edges <- rbind(fw_edges,es_edges)
View(full_edges)
fw <- graph_from_data_frame(fw_edges, directed = TRUE) # network with only food web edges
fw_es <- graph_from_data_frame(full_edges, directed = TRUE) # network with both food web and es edges
# Remove cannibalism - TO DO - confirm we want to do this.
fw <- simplify(fw, remove.loops = TRUE)
fw_es <- simplify(fw_es, remove.loops=TRUE)
# convert graph objects to adjacency matrices to be used in source functions by AB
mat.fw <- as_adjacency_matrix(fw, sparse= FALSE, attr = NULL)
mat.fw_es <- as_adjacency_matrix(fw_es, sparse = FALSE, attr = NULL)
View(fw)
# number of resources for each species
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(fw, v= species_nodes, mode="in"))
susc.spp <- resources[resources$InDegree>0,] # subset to the non-basal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
#net_props[nrow(net_props)+1,] <- c(season,length(c(species_nodes,es_nodes)),length(species_nodes),length(es_nodes),length(c(fw_edges$from,es_edges$from)),length(fw_edges$from),length(es_edges$from),length(basal.spp$species),length(susc.spp$species))
fw_name <- sprintf("Tampara_Lake_%s", season)
auc <- es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", fw_name, "most_least", tot.susc, FALSE, es_nodes)
fw_name <- sprintf("Tampara_Lake_%s", season)
auc <- es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", fw_name, "most_least", tot.susc, FALSE, es_nodes)
# Rarity sequence
rarity_sequence <- read.csv(sprintf("%s_rarity_sequence.csv",season), header=T)
rarity_sequence <- rarity_sequence$ORDER
# double check same number of species
if (length(rarity_sequence) != length(species_nodes)){
print("rarity sequence not the correct length")
}
auc <- fw_robustness(mat.fw, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE)
auc <- es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE, es_nodes)
MATRIX <- mat.fw_es
BASAL <- rarity_sequence
N_RAND <- NULL
OUTPUT <- NULL
FW_NAME <- fw_name
SEQ_NAME <- "rarity"
TOT_SUC <- tot.susc
GIVEN <- TRUE
SERVICE_NAMES <- es_nodes
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
View(mat_results)
# make a column to track number of services lost at each step (new thing for ES)
es_pattern <- paste(SERVICE_NAMES, collapse= "|")
mat_results$service_lost <- ifelse(str_count(string = mat_results$name_lost, pattern = es_pattern),str_count(string = mat_results$name_lost, pattern = es_pattern), NA)
NUM_SERVICES <- length(SERVICE_NAMES)
# track number services remain to use in propES_remain column
mat_results[["service_lost"]][is.na(mat_results[["service_lost"]])] <- 0
mat_results$cum_nontarget_lost <- cumsum(mat_results$service_lost)
mat_results$ES_remain <- c(NUM_SERVICES-cumsum(mat_results$service_lost))
mat_results$propES_remain <- c(mat_results$ES_remain/NUM_SERVICES)
# ADJUST X AXIS
target_remove <- length(BASAL)
mat_results$prop_removed <- mat_results$num_removed_tot / target_remove
root <- ggplot(mat_results, aes(x=prop_removed, y=propES_remain))
(root + geom_point(shape=19)
+ geom_line() + theme_bw(base_size = 14)
+ xlim(0,1) + ylim(0,1)
+ xlab("Proportion of target species removed")
+ ylab("Proportion of ecosystem services remaining")
)
ggsave(sprintf("%s_%s_ES.jpeg",FW_NAME, SEQ_NAME), width=6, height=5, units="in", dpi=500)
write.csv(mat_results, sprintf("%s_%s_ES.csv",FW_NAME, SEQ_NAME))
# revise output to get ES AUC
# this tracks the secondary loss of ecosystem service nodes instead of species
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper()
auc <- es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", fw_name, "most_least", tot.susc, FALSE, es_nodes)
debugSource("~/Research/sMoste/Tampara Lake/lake-tampara-food-web/code/es-robustness/Robustness-fw-es-Tampara.R")
View(mat_results)
# revise output to get ES AUC
# this tracks the secondary loss of ecosystem service nodes instead of species
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper_given()
View(auc_res)
auc <- es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE, es_nodes)
auc <- es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE, es_nodes)
# Function for ES Robustness
es_robustness <- function(MATRIX, BASAL, N_RAND, OUTPUT, FW_NAME, SEQ_NAME, TOT_SUSC, GIVEN, SERVICE_NAMES) {
if (GIVEN) {
# run a given extinction cascade (specified by BASAL)
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
} else {
# run standard extinction cascades and subset to the results you want
mat_output <- collapse_wrap(N = MATRIX, basal = BASAL, n_rand = N_RAND)
mat_results <- subset(mat_output, mat_output$id == OUTPUT)
}
# make a column to track number of services lost at each step (new thing for ES)
es_pattern <- paste(SERVICE_NAMES, collapse= "|")
mat_results$service_lost <- ifelse(str_count(string = mat_results$name_lost, pattern = es_pattern),str_count(string = mat_results$name_lost, pattern = es_pattern), NA)
NUM_SERVICES <- length(SERVICE_NAMES)
# track number services remain to use in propES_remain column
mat_results[["service_lost"]][is.na(mat_results[["service_lost"]])] <- 0
mat_results$cum_nontarget_lost <- cumsum(mat_results$service_lost)
mat_results$ES_remain <- c(NUM_SERVICES-cumsum(mat_results$service_lost))
mat_results$propES_remain <- c(mat_results$ES_remain/NUM_SERVICES)
# ADJUST X AXIS
target_remove <- length(BASAL)
mat_results$prop_removed <- mat_results$num_removed_tot / target_remove
root <- ggplot(mat_results, aes(x=prop_removed, y=propES_remain))
(root + geom_point(shape=19)
+ geom_line() + theme_bw(base_size = 14)
+ xlim(0,1) + ylim(0,1)
+ xlab("Proportion of target species removed")
+ ylab("Proportion of ecosystem services remaining")
)
ggsave(sprintf("%s_%s_ES.jpeg",FW_NAME, SEQ_NAME), width=6, height=5, units="in", dpi=500)
write.csv(mat_results, sprintf("%s_%s_ES.csv",FW_NAME, SEQ_NAME))
if (GIVEN){
# revise output to get ES AUC
# this tracks the secondary loss of ecosystem service nodes instead of species
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper_given()
} else {
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper()
}
return(auc_res$auc)
}
auc <- es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, fw_name, "rarity", tot.susc, TRUE, es_nodes)
View(`%ni%`)
fw_robustness_random <- function(MATRIX, BASAL, N_RAND, TOT_SUSC) {
rand <- data.frame(matrix(ncol=2,nrow=N_RAND)) # save robustness results
colnames(rand) <- c("Randomization","R")
rand$Randomization <- seq(1:N_RAND)
for(i in c(1:N_RAND)){
seq <- sample(BASAL) # random extinction order
mat_results <- collapse_wrap_given(N = MATRIX, basal = seq)
mat_results$nodes_susc <- TOT_SUSC
mat_results$nontarget_lost_each <- stri_count_fixed(mat_results$name_lost,";")
mat_results$cum_nontarget_lost <- cumsum(mat_results$nontarget_lost_each)
mat_results$Y <- (mat_results$nodes_susc - mat_results$cum_nontarget_lost)/mat_results$nodes_susc
rand$R[i] <- robust_auc(x = mat_results$prop_removed, y = mat_results$Y)
}
# For now return min, mean, and max of the robustness results from random extinctions
return(list("min"=min(rand$R),"mean"=mean(rand$R),"max"=max(rand$R)))
}
auc_res <- fw_robustness_random(mat.fw, colnames(mat.fw), 1000, tot.susc)
# load packages
library(tidyverse)
library(igraph)
library(dplyr)
library(stringi)
library(tibble)
## AB source functions for analysis----
source("NEWrobustness_functions.R")
## disable warnings
options(warn=-1)
# for consistent results from this script with randomization
set.seed(20)
# TO DO -- move these to a helper file before pushing
# Function for food web robustness
fw_robustness <- function (MATRIX, BASAL, N_RAND, OUTPUT, FW_NAME, SEQ_NAME, TOT_SUSC, GIVEN) {
if (GIVEN) {
# run a given extinction cascade (specified by BASAL)
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
} else {
# run standard extinction cascades and subset to the results you want
mat_output <- collapse_wrap(N = MATRIX, basal = BASAL, n_rand = N_RAND)
mat_results <- subset(mat_output, mat_output$id == OUTPUT)
}
# Y AXIS
mat_results$nodes_susc <- TOT_SUSC
mat_results$nontarget_lost_each <- stri_count_fixed(mat_results$name_lost,";")
mat_results$cum_nontarget_lost <- cumsum(mat_results$nontarget_lost_each)
mat_results$Y <- (mat_results$nodes_susc - mat_results$cum_nontarget_lost) / mat_results$nodes_susc
# X AXIS
target_remove <- length(BASAL)
mat_results$prop_target_removed <- mat_results$num_removed_tot / target_remove
# Plot
root <- ggplot(mat_results, aes(x=prop_target_removed, y=Y))
(root + geom_point(shape=19)
+ geom_line() + theme_bw(base_size = 14)
+ xlim(0,1) + ylim(0,1)
+ xlab("Proportion of target species removed")
+ ylab("Proportion of susceptible species remaining")
)
ggsave(sprintf("%s_%s.jpeg",FW_NAME, SEQ_NAME), width=6, height=5, units="in", dpi=500)
# Calculate and save robustness (AUC)
auc <- robust_auc(x = mat_results$prop_target_removed, y = mat_results$Y)
write.csv(mat_results, sprintf("%s_%s.csv",FW_NAME, SEQ_NAME))
return(auc)
}
# Function for ES Robustness
es_robustness <- function(MATRIX, BASAL, N_RAND, OUTPUT, FW_NAME, SEQ_NAME, TOT_SUSC, GIVEN, SERVICE_NAMES) {
if (GIVEN) {
# run a given extinction cascade (specified by BASAL)
mat_results <- collapse_wrap_given(N = MATRIX, basal = BASAL)
} else {
# run standard extinction cascades and subset to the results you want
mat_output <- collapse_wrap(N = MATRIX, basal = BASAL, n_rand = N_RAND)
mat_results <- subset(mat_output, mat_output$id == OUTPUT)
}
# make a column to track number of services lost at each step (new thing for ES)
es_pattern <- paste(SERVICE_NAMES, collapse= "|")
mat_results$service_lost <- ifelse(str_count(string = mat_results$name_lost, pattern = es_pattern),str_count(string = mat_results$name_lost, pattern = es_pattern), NA)
NUM_SERVICES <- length(SERVICE_NAMES)
# track number services remain to use in propES_remain column
mat_results[["service_lost"]][is.na(mat_results[["service_lost"]])] <- 0
mat_results$cum_nontarget_lost <- cumsum(mat_results$service_lost)
mat_results$ES_remain <- c(NUM_SERVICES-cumsum(mat_results$service_lost))
mat_results$propES_remain <- c(mat_results$ES_remain/NUM_SERVICES)
# ADJUST X AXIS
target_remove <- length(BASAL)
mat_results$prop_removed <- mat_results$num_removed_tot / target_remove
root <- ggplot(mat_results, aes(x=prop_removed, y=propES_remain))
(root + geom_point(shape=19)
+ geom_line() + theme_bw(base_size = 14)
+ xlim(0,1) + ylim(0,1)
+ xlab("Proportion of target species removed")
+ ylab("Proportion of ecosystem services remaining")
)
ggsave(sprintf("%s_%s_ES.jpeg",FW_NAME, SEQ_NAME), width=6, height=5, units="in", dpi=500)
write.csv(mat_results, sprintf("%s_%s_ES.csv",FW_NAME, SEQ_NAME))
if (GIVEN){
# revise output to get ES AUC
# this tracks the secondary loss of ecosystem service nodes instead of species
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper_given()
} else {
auc_res <- mat_results %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper()
}
return(auc_res$auc)
}
fw_robustness_random <- function(MATRIX, BASAL, N_RAND, TOT_SUSC) {
rand <- data.frame(matrix(ncol=2,nrow=N_RAND)) # save robustness results
colnames(rand) <- c("Randomization","R")
rand$Randomization <- seq(1:N_RAND)
for(i in c(1:N_RAND)){
seq <- sample(BASAL) # random extinction order
mat_results <- collapse_wrap_given(N = MATRIX, basal = seq)
mat_results$nodes_susc <- TOT_SUSC
mat_results$nontarget_lost_each <- stri_count_fixed(mat_results$name_lost,";")
mat_results$cum_nontarget_lost <- cumsum(mat_results$nontarget_lost_each)
mat_results$Y <- (mat_results$nodes_susc - mat_results$cum_nontarget_lost)/mat_results$nodes_susc
rand$R[i] <- robust_auc(x = mat_results$prop_removed, y = mat_results$Y)
}
# For now return min, mean, and max of the robustness results from random extinctions
return(list("min"=min(rand$R),"mean"=mean(rand$R),"max"=max(rand$R)))
}
season <- "Premonsoon" # temp
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_edges <- subset(edges, edges$link_type == 1) # ES edges only
# remove any es edges that include species not in the species list
es_edges <- subset(es_edges, es_edges$from %in% species_nodes)
# full set of edges to make the es web
es_nodes <- unique(es_edges$to)
full_edges <- rbind(fw_edges,es_edges)
fw <- graph_from_data_frame(fw_edges, directed = TRUE) # network with only food web edges
fw_es <- graph_from_data_frame(full_edges, directed = TRUE) # network with both food web and es edges
# Remove cannibalism - TO DO - confirm we want to do this.
fw <- simplify(fw, remove.loops = TRUE)
fw_es <- simplify(fw_es, remove.loops=TRUE)
# convert graph objects to adjacency matrices to be used in source functions by AB
mat.fw <- as_adjacency_matrix(fw, sparse= FALSE, attr = NULL)
mat.fw_es <- as_adjacency_matrix(fw_es, sparse = FALSE, attr = NULL)
# number of resources for each species
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(fw, v= species_nodes, mode="in"))
susc.spp <- resources[resources$InDegree>0,] # subset to the non-basal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
#net_props[nrow(net_props)+1,] <- c(season,length(c(species_nodes,es_nodes)),length(species_nodes),length(es_nodes),length(c(fw_edges$from,es_edges$from)),length(fw_edges$from),length(es_edges$from),length(basal.spp$species),length(susc.spp$species))
fw_name <- sprintf("Tampara_Lake_%s", season)
auc_res <- fw_robustness_random(mat.fw, colnames(mat.fw), 1000, tot.susc)
View(auc_res)
MATRIX <- mat.fw_es
BASAL <- colnames(mat.fw)
N_RAND <- 1000
TOT_SUSC <- tot.susc
SERVICE_NAMES <- es_nodes
es_pattern <- paste(SERVICE_NAMES, collapse= "|")
NUM_SERVICES <- length(SERVICE_NAMES)
rand <- data.frame(matrix(ncol=2,nrow=N_RAND)) # save robustness results
colnames(rand) <- c("Randomization","R")
rand$Randomization <- seq(1:N_RAND)
View(rand)
for(i in c(1:N_RAND)){
seq <- sample(BASAL)
mat_output <- collapse_wrap_given(N = MATRIX, basal = seq)
auc_res <- mat_output %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper_given()
rand$R[i] <- auc_res$auc
}
View(rand)
min(rand$R)
mean(rand$R)
max(rand$R)
es_robustness_random <- function(MATRIX, BASAL, N_RAND, TOT_SUSC, SERVICE_NAMES){
es_pattern <- paste(SERVICE_NAMES, collapse= "|")
NUM_SERVICES <- length(SERVICE_NAMES)
rand <- data.frame(matrix(ncol=2,nrow=N_RAND)) # save robustness results
colnames(rand) <- c("Randomization","R")
rand$Randomization <- seq(1:N_RAND)
for(i in c(1:N_RAND)){
seq <- sample(BASAL)
mat_output <- collapse_wrap_given(N = MATRIX, basal = seq)
auc_res <- mat_output %>%
mutate(service_lost = str_count(string = name_lost, pattern = es_pattern)) %>%
# add column with the cumulative sum of the services lost
mutate(service_lost_c = cumsum(service_lost)) %>%
# overwrite original column of proportion species remaining, for now
mutate(prop_remain = 1 - (service_lost_c / NUM_SERVICES)) %>%
auc_wrapper_given()
rand$R[i] <- auc_res$auc
}
# TO DO - save csv
return(list("min"=min(rand$R),"mean"=mean(rand$R),"max"=max(rand$R)))
}
auc_res <- es_robustness_random(mat.fw_es, colnames(mat.fw), 1000, tot.susc, es_nodes)
View(auc_res)
colnames(mat.fw)
species_nodes
View(auc_res)
auc_res[1]
auc_res[[1]]
auc_res[1]
##########################################
######## Food web and ES robustness calculations
### Written by: Aislyn Keyes using functions written by Allison Barner
### From Nature Communications 2021, 10.1038/s41467-021-21824-x
### Modified for use in Tampara Lake project by Lucy Van Kleunen
### July 2023
# load packages
library(tidyverse)
library(igraph)
library(dplyr)
library(stringi)
library(tibble)
## AB source functions for analysis----
source("NEWrobustness_functions.R")
## Other helper functions for calling robustness functions and plotting
source("robustness_helper.R")
## disable warnings
options(warn=-1)
# for consistent results from this script with randomization
set.seed(20)
setwd("~/Research/sMoste/Tampara Lake/lake-tampara-food-web/code/es-robustness")
