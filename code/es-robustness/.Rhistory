DC_assort <- assorts_table$DC
fit <- lm(OS ~ DC_assort)
summary(fit)
confint(fit)
B_assort <- assorts_table$B
fit <- lm(OS ~ B_assort)
summary(fit)
confint(fit)
CD11b_assort <- assorts_table$CD11b.
fit <- lm(OS ~ CD11b_assort)
summary(fit)
confint(fit)
Neuroep_assort <- assorts_table$Neuroepithelials
fit <- lm(OS ~ Neuroep_assort)
summary(fit)
confint(fit)
Nonleuk_assort <- assorts_table$Non.leukocyte_derived_neural
fit <- lm(OS ~ Nonleuk_assort)
summary(fit)
confint(fit)
NK_assort <- assorts_table$NK
fit <- lm(OS ~ NK_assort)
summary(fit)
confint(fit)
# for one variable
#newd <- data.frame(x=seq(min(tumor_assort), max(tumor_assort), length.out=77))
#pred_w_ci <- cbind(newd,predict(fit, newd, interval="confidence"))
#pred_w_pi <- cbind(newd,predict(fit, newd, interval="prediction"))
#lines(pred_w_ci[c(1, nrow(pred_w_ci)), c("x","fit")], col="#56B4E9")
#lines(pred_w_ci[,c("x","lwr")],col="grey")
#lines(pred_w_ci[,c("x","upr")],col="grey")
#lines(pred_w_pi[,c("x","lwr")],col="grey",lty=2)
#lines(pred_w_pi[,c("x","upr")],col="grey",lty=2)
#plot(fit,1:6)
# handling missing values (that are missing non-randomly) - XG Boost -
# library(xgboost)
# https://www.kaggle.com/code/rtatman/machine-learning-with-xgboost-in-r/notebook
# https://xgboost.readthedocs.io/en/stable/faq.html
# https://towardsdatascience.com/xgboost-is-not-black-magic-56ca013144b4
# feature importance
#https://www.rdocumentation.org/packages/xgboost/versions/0.6.4.1/topics/xgb.importance
tumor_assort <- assorts_table$Tumor
fibroblast_assort <- assorts_table$Fibroblasts
unidentified_assort <- assorts_table$Unidentified
M1_assort <- assorts_table$M1
OS <- assorts_table$OS
fit <- lm(OS ~ tumor_assort)
summary(fit)
confint(fit)
fit <- lm(OS ~ fibroblast_assort)
summary(fit)
confint(fit)
fit <- lm(OS ~ unidentified_assort)
summary(fit)
confint(fit)
fit <- lm(OS ~ M1_assort)
summary(fit)
confint(fit)
CD11c_assort <- assorts_table$CD11c.
fit <- lm(OS ~ CD11c_assort)
summary(fit)
confint(fit)
Lymph_assort <- assorts_table$Lymphatic_vessel
fit <- lm(OS ~ Lymph_assort)
summary(fit)
confint(fit)
Oimmune_assort <- assorts_table$Other_immune
fit <- lm(OS ~ Oimmune_assort)
summary(fit)
confint(fit)
CD3T_assort <- assorts_table$CD3T
fit <- lm(OS ~ CD3T_assort)
summary(fit)
confint(fit)
M2_assort <- assorts_table$M2
fit <- lm(OS ~ M2_assort)
summary(fit)
confint(fit)
CD8T_assort <- assorts_table$CD8T
fit <- lm(OS ~ CD8T_assort)
summary(fit)
confint(fit)
Bloodv_assort <- assorts_table$Blood_vessel
fit <- lm(OS ~ Bloodv_assort)
summary(fit)
confint(fit)
CD4T_assort <- assorts_table$CD4T
fit <- lm(OS ~ CD4T_assort)
summary(fit)
confint(fit)
DC_assort <- assorts_table$DC
fit <- lm(OS ~ DC_assort)
summary(fit)
confint(fit)
B_assort <- assorts_table$B
fit <- lm(OS ~ B_assort)
summary(fit)
confint(fit)
CD11b_assort <- assorts_table$CD11b.
fit <- lm(OS ~ CD11b_assort)
summary(fit)
confint(fit)
Neuroep_assort <- assorts_table$Neuroepithelials
fit <- lm(OS ~ Neuroep_assort)
summary(fit)
confint(fit)
Nonleuk_assort <- assorts_table$Non.leukocyte_derived_neural
fit <- lm(OS ~ Nonleuk_assort)
summary(fit)
confint(fit)
NK_assort <- assorts_table$NK
fit <- lm(OS ~ NK_assort)
summary(fit)
confint(fit)
# all of the assortativities (with replacing NAN with 0)
tumor_assort <- assorts_table$Tumor
fibroblast_assort <- assorts_table$Fibroblasts
unidentified_assort <- assorts_table$Unidentified
M1_assort <- assorts_table$M1
CD11c_assort <- assorts_table$CD11c.
CD11c_assort[is.na(CD11c_assort)] = 0
Lymph_assort <- assorts_table$Lymphatic_vessel
Lymph_assort[is.na(Lymph_assort)] = 0
Oimmune_assort <- assorts_table$Other_immune
Oimmune_assort[is.na(Oimmune_assort)] = 0
CD3T_assort <- assorts_table$CD3T
CD3T_assort[is.na(CD3T_assort)] = 0
M2_assort <- assorts_table$M2
M2_assort[is.na(M2_assort)] = 0
CD8T_assort <- assorts_table$CD8T
CD8T_assort[is.na(CD8T_assort)] = 0
Bloodv_assort <- assorts_table$Blood_vessel
Bloodv_assort[is.na(Bloodv_assort)] = 0
CD4T_assort <- assorts_table$CD4T
CD4T_assort[is.na(CD4T_assort)] = 0
DC_assort <- assorts_table$DC
DC_assort[is.na(DC_assort)] = 0
B_assort <- assorts_table$B
B_assort[is.na(B_assort)] = 0
CD11b_assort <- assorts_table$CD11b.
CD11b_assort[is.na(CD11b_assort)] = 0
Neuroep_assort <- assorts_table$Neuroepithelials
Neuroep_assort[is.na(Neuroep_assort)] = 0
Nonleuk_assort <- assorts_table$Non.leukocyte_derived_neural
Nonleuk_assort[is.na(Nonleuk_assort)] = 0
NK_assort <- assorts_table$NK
NK_assort[is.na(NK_assort)] = 0
OS <- assorts_table$OS
plot(M1_assort,OS)
plot(CD11b_assort,OS)
fit <- lm(OS ~ tumor_assort + fibroblast_assort + unidentified_assort + M1_assort +
CD11c_assort + Lymph_assort + Oimmune_assort + CD3T_assort + M2_assort +
CD8T_assort + Bloodv_assort + CD4T_assort + DC_assort + B_assort + CD11b_assort +
Neuroep_assort + Nonleuk_assort + NK_assort)
summary(fit)
confint(fit)
install.packages("taxize")
# load packages
library(tidyverse)
library(igraph)
library(dplyr)
library(stringi)
## AB source functions for analysis----
source("NEWrobustness_functions.R")
setwd("C:/Users/lucyv/Documents/Research/sMoste/Tampara Lake/lake-tampara-food-web/code/es-robustness")
# load packages
library(tidyverse)
library(igraph)
library(dplyr)
library(stringi)
## AB source functions for analysis----
source("NEWrobustness_functions.R")
## disable warnings
options(warn=-1)
seasons <- c("Premonsoon","Postmonsoon","Monsoon")
for (season in seasons){
edges.ES <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
#nodes.ES <- read.csv("Final_CSM_Nodes_ES.csv") #node list
}
View(edges.ES)
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
#nodes.ES <- read.csv("Final_CSM_Nodes_ES.csv") #node list
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
View(es_edges)
View(fw_edges)
View(es_edges)
hi <- fw_edges %>% unlist()
hi
View(fw_edges)
hi <- unique(fw_edges$from)
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(unique(fw_edges$from),unique(fw_edges$to))
#es_nodes <-
#nodes.ES <- read.csv("Final_CSM_Nodes_ES.csv") #node list
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
seasons <- c("Premonsoon","Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(unique(fw_edges$from),unique(fw_edges$to))
es_nodes <- unique(es_edges$to)
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
seasons <- c("Premonsoon") #,"Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(unique(fw_edges$from),unique(fw_edges$to))
es_nodes <- unique(es_edges$to)
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
View(fw_edges)
length(species_nodes)
es_nodes
unique(fw_edges$to)
unique(fw_edges$from)
seasons <- c("Premonsoon") #,"Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
#Extinction sequences
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
unique(fw_edges$from)
unique(fw_edges$to
unique(fw_edges$to)
unique(fw_edges$to)
1638+367
seasons <- c("Premonsoon","Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
#Extinction sequences
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
## AB source functions for analysis----
source("NEWrobustness_functions.R")
## disable warnings
options(warn=-1)
seasons <- c("Premonsoon","Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
#Extinction sequences
#threats <- read.csv("CSM.RealisticSeq_AllThreats.csv", header=T) # threatened species sequence
#rare.seq <- read.csv("RareCSM_seq_FINAL.csv", header=T) # rarity sequence
#indirect.spp <- read.csv("CSM_IndirectAll.csv", header=T) # supporting species sequence
#node.info <- read.csv("Final_CSM_Nodes_ES.csv", header=T) # will be used for abundance/biomass data
#biomass.dat <- read.csv("CSMBiomass.Estimates.csv") # biomass data,
# estimated using equations from Hechinger et al. (2011) A common scaling rule for abundance, energetics and prod.
# of parasitic and free-living species
#service_nodes <- c(350,450,550,650,750,850,950) # for tracking in ES robustness calculation
}
length(es_nodes)
# create empty data frame to fill with robustness values
rand <- data.frame(matrix(ncol=3,nrow=1000))
x <- c("Randomization","R_web","R_ES")
colnames(rand) <- x
rand$Randomization <- seq(1:1000)
View(rand)
n <- c(1:1000) # save 100 random sequences
sequences <- vector(mode="list",length=1000)
for(i in n){
sequences[[i]] <- sample(mat_basal_given)
}
rand <- data.frame(matrix(ncol=3,nrow=1000)) # data frame to hold random results
x <- c("Randomization","R_web","R_ES")
colnames(rand) <- x
rand$Randomization <- seq(1:1000)
n <- c(1:1000) # save 100 random sequences
sequences <- vector(mode="list",length=1000)
for(i in n){
sequences[[i]] <- sample(colnames(mat.fw))
}
View(sequences)
sequences[1]
sequences(1)
sequences[[1]]
##########################################
######## Food web and ES robustness calculations
### Written by: Aislyn Keyes using functions written by Allison Barner
### From Nature Communications 2021, 10.1038/s41467-021-21824-x
### Modified for use in Tampara Lake project by Lucy Van Kleunen
### July 2023
# load packages
library(tidyverse)
library(igraph)
library(dplyr)
library(stringi)
## AB source functions for analysis----
source("NEWrobustness_functions.R")
## disable warnings
options(warn=-1)
seasons <- c("Premonsoon","Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_es <- graph.data.frame(c(fw_edges,es_edges), directed = T, vertices = c(species_nodes,es_nodes))
# Remove cannibalism
fw <- simplify(fw, remove.loops = T)
fw_es <- simplify(fw_es, remove.loops=T)
# convert graph objects to adjacency matrices to be used in source functions by AB
mat.fw <- get.adjacency(fw, sparse=FALSE, attr = NULL)
mat.fw_es <- get.adjacency(fw_es, sparse = FALSE, attr = NULL)
# number of resources for each species
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(species_nodes, mode="in"))
susc.spp <- resources[resources$InDegree>0,] # subset to the nonbasal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
# FOOD WEB ROBUSTNESS
# TO DO -- need to see these functions to understand output
# Most to least connected extinction sequence
#fw_robustness(mat.fw, colnames(mat.fw), 1, "high", "most_least")
# Rarity sequence
#fw_robustness(mat.fw, rarity_sequence, NULL, NULL, "rarity")
# Random sequences
#fw_robustness_random_1000()
# ES ROBUSTNESS
# TO DO -- need to see these functions to understand output
# Most to least connected extinction sequence
#es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", NUM_SERVICES, "most_least")
# Rarity sequence
#es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, NUM_SERVICES,  "rarity")
# Random sequences
#es_robustness_random_1000()
}
NUM_SERVICES
seasons <- c("Premonsoon")#,"Postmonsoon","Monsoon")
for (season in seasons){
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_es <- graph.data.frame(c(fw_edges,es_edges), directed = T, vertices = c(species_nodes,es_nodes))
# Remove cannibalism
fw <- simplify(fw, remove.loops = T)
fw_es <- simplify(fw_es, remove.loops=T)
# convert graph objects to adjacency matrices to be used in source functions by AB
mat.fw <- get.adjacency(fw, sparse=FALSE, attr = NULL)
mat.fw_es <- get.adjacency(fw_es, sparse = FALSE, attr = NULL)
# number of resources for each species
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(species_nodes, mode="in"))
susc.spp <- resources[resources$InDegree>0,] # subset to the nonbasal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
# FOOD WEB ROBUSTNESS
# TO DO -- need to see these functions to understand output
# Most to least connected extinction sequence
#fw_robustness(mat.fw, colnames(mat.fw), 1, "high", "most_least")
# Rarity sequence
#fw_robustness(mat.fw, rarity_sequence, NULL, NULL, "rarity")
# Random sequences
#fw_robustness_random_1000()
# ES ROBUSTNESS
# TO DO -- need to see these functions to understand output
# Most to least connected extinction sequence
#es_robustness(mat.fw_es, colnames(mat.fw), 1, "high", NUM_SERVICES, "most_least")
# Rarity sequence
#es_robustness(mat.fw_es, rarity_sequence, NULL, NULL, NUM_SERVICES,  "rarity")
# Random sequences
#es_robustness_random_1000()
}
mat.fw
mat.fw
season <- "Premonsoon"
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_edges
graph.data.frame
View(fw_edges)
season <- "Premonsoon"
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
# TO DO - check from - to
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
View(fw_edges)
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw
fw_es <- graph.data.frame(c(fw_edges,es_edges), directed = T, vertices = c(species_nodes,es_nodes))
View(fw_edges)
View(es_edges)
hi <- rbind(fw_edges,es_edges)
fw_es <- graph.data.frame(edges, directed = T, vertices = c(species_nodes,es_nodes))
season <- "Premonsoon"
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_es <- graph.data.frame(edges, directed = T, vertices = c(species_nodes,es_nodes))
View(edges)
c(species_nodes,es_nodes)
hi <- c(species_nodes,es_nodes)
hi
season <- "Premonsoon"
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
# TO DO - check from - to
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_es <- graph.data.frame(edges, directed = T, vertices = c(species_nodes,es_nodes))
fw_es <- graph.data.frame(edges, directed = T, vertices = c(species_nodes,es_nodes))
fw <- graph.data.frame(fw_edges, directed = T, vertices = species_nodes)
fw_es <- graph.data.frame(edges, directed = T, vertices = c(species_nodes,es_nodes))
season <- "Premonsoon"
edges <- read.csv(sprintf("../../data/%s_edgelist_NCP.csv", season)) # edgelist
edges[1] <- NULL # remove first column
fw_edges <- subset(edges, edges$link_type == 0) # food web edges only
es_edges <- subset(edges, edges$link_type == 1) # ES edges
species_nodes <- unique(c(unique(fw_edges$from),unique(fw_edges$to)))
es_nodes <- unique(es_edges$to)
NUM_SERVICES <- length(es_nodes)
# TO DO - check from - to
fw <- graph.data.frame(fw_edges, directed = T)
fw_es <- graph.data.frame(edges, directed = T)
fw_es <- graph.data.frame(edges, directed = T)
fw <- simplify(fw, remove.loops = T)
fw_es <- simplify(fw_es, remove.loops=T)
mat.fw <- get.adjacency(fw, sparse=FALSE, attr = NULL)
mat.fw_es <- get.adjacency(fw_es, sparse = FALSE, attr = NULL)
resources <- data.frame(species = species_nodes, InDegree = igraph::degree(fw, mode="in"))
View(resources)
susc.spp <- resources[resources$InDegree>0,] # subset to the nonbasal, susceptible species
basal.spp <- resources[resources$InDegree==0,] # subset to the basal, NOT susceptible species
View(basal.spp)
tot.susc <- nrow(susc.spp) # denominator for all sequences on food web y axis
quick_props <- data.frame()
